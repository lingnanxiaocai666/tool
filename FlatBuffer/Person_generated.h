// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PERSON_COM_XTUER_BEAN_H_
#define FLATBUFFERS_GENERATED_PERSON_COM_XTUER_BEAN_H_

#include "flatbuffers/flatbuffers.h"

namespace com {
namespace xtuer {
namespace bean {

struct Person;

struct Person FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_AGE = 6
  };
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(VT_NAME); }
  int32_t age() const { return GetField<int32_t>(VT_AGE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<int32_t>(verifier, VT_AGE) &&
           verifier.EndTable();
  }
};

struct PersonBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(Person::VT_NAME, name); }
  void add_age(int32_t age) { fbb_.AddElement<int32_t>(Person::VT_AGE, age, 0); }
  PersonBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PersonBuilder &operator=(const PersonBuilder &);
  flatbuffers::Offset<Person> Finish() {
    auto o = flatbuffers::Offset<Person>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Person> CreatePerson(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t age = 0) {
  PersonBuilder builder_(_fbb);
  builder_.add_age(age);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Person> CreatePersonDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t age = 0) {
  return CreatePerson(_fbb, name ? _fbb.CreateString(name) : 0, age);
}

inline const com::xtuer::bean::Person *GetPerson(const void *buf) { return flatbuffers::GetRoot<com::xtuer::bean::Person>(buf); }

inline bool VerifyPersonBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<com::xtuer::bean::Person>(nullptr); }

inline void FinishPersonBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<com::xtuer::bean::Person> root) { fbb.Finish(root); }

}  // namespace bean
}  // namespace xtuer
}  // namespace com

#endif  // FLATBUFFERS_GENERATED_PERSON_COM_XTUER_BEAN_H_
